ingress:
  enabled: true
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  # Values can be templated
  annotations: {
    app: grafana,
    app.kubernetes.io/instance: grafana,
    app.kubernetes.io/name: grafana,
    cert-manager.io/cluster-issuer: letsencrypt,
    kubernetes.io/tls-acme: "true"
  }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /

  # pathType is only for k8s >= 1.1=
  pathType: ImplementationSpecific

  hosts:
    - grafana.bensonphillips.dev
  ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
  extraPaths: []
  # - path: /*
  #   backend:
  #     serviceName: ssl-redirect
  #     servicePort: use-annotation
  ## Or for k8s > 1.19
  # - path: /*
  #   pathType: Prefix
  #   backend:
  #     service:
  #       name: ssl-redirect
  #       port:
  #         name: use-annotation


  tls: [
    - secretName: letsencrypt
      hosts:
        - grafana.bensonphillips.dev
  ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: grafana
#   annotations:
#     app: grafana
#     app.kubernetes.io/instance: grafana
#     app.kubernetes.io/name: grafana
#     cert-manager.io/cluster-issuer: letsencrypt
#     kubernetes.io/tls-acme: "true"
# spec:
#   tls:
#     - hosts:
#       - grafana.bensonphillips.dev
#       secretName: letsencrypt
#   ingressClassName: "nginx"
#   rules:
#     - host: grafana.bensonphillips.dev
#       http:
#         paths:
#           - backend:
#               service:
#                 name: grafana
#                 port:
#                   number: 80
#             path: /
#             pathType: ImplementationSpecific